@page "/fetchdata"
@using Apparatus.Blazor.SampleApp.Pages.Actions
@using Apparatus.Blazor.SampleApp.Components.ConfirmationModal.Actions.Open;
@using Apparatus.Blazor.SampleApp.States
@using Apparatus.Blazor.State
@using Apparatus.Blazor.State.Contracts
@inherits BlazorStateComponent

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>



@if (State.Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    if (State.Forecasts.Any())
    {
       
        <button type="button" class="btn btn-sm btn-link link-success" @onclick="() => OnReloadClick()">
            <iconify-icon icon="oi:reload"></iconify-icon>
            Reload
        </button>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in State.Forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                        <td class="text-nowrap">
                            <button type="button" class="btn btn-sm btn-link link-danger" @onclick="() => OnRemoveClick(forecast.Date)">
                                Remove
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>No data to display.</em></p>
    }
}

@code {

    WeatherForecastTableState State => GetState<WeatherForecastTableState>();

#nullable disable annotations
    [Inject] IActionDispatcher Dispatcher { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!State.Initialized)
        {
            await Dispatcher.Dispatch(new LoadWeatherForecast());
        }
    }

    private Task OnRemoveClick(DateTime date)
    {
        var modalAction = new OpenConfirmationModel()
            {
                Content = "Confirm delition",
                DispatchOnConfirmation = new RemoveTableRow() { Date = date }
            };

        return Dispatcher.Dispatch(modalAction);
    }

    private async Task OnReloadClick()
    {
        await Dispatcher.Dispatch(new LoadWeatherForecast());
    }
}
